<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thinktecture.IdentityModel</name>
    </assembly>
    <members>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.LocalTimeOffsetMillis">
            <summary>
            Local time offset in milliseconds.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.EnableResponseValidation">
            <summary>
            Set this to true for the server response to be validated using the artifacts in Server-Authorization header.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.EnableAutoCompensationForClockSkew">
            <summary>
            Set this true for the skew between the client and the server clocks to be automatically compensated.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.CredentialsCallback">
            <summary>
            Func delegate that returns the Credential.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.NormalizationCallback">
            <summary>
            Func delegate that returns the normalized form of the request message to be used
            as application specific data ('ext' field) in the Authorization request header.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.VerificationCallback">
            <summary>
            Func delegate that returns true if the specified normalized form of the response
            message matches the normalized form of the specified response message.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions.RequestPayloadHashabilityCallback">
            <summary>
            Func delegate that returns true, if the request body must be hashed and included
            in the MAC ('mac' field) sent in the Authorization request header.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Client.HawkValidationHandler">
            <summary>
            The client side message handler that adds the Authorization header to the request and validates the response.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkValidationHandler.#ctor(Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions)">
            <summary>
            The client side message handler that adds the Authorization header to the request and validates the response.
            </summary>
            <param name="options">Hawk authenitcation options</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.IRequestMessageExtension.HasValidHawkScheme(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage)">
            <summary>
            Returns true if there is an Authorization HTTP header present in the request, the header has a scheme 
            that is "hawk" and that the parameter in the header is not empty.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IMessage">
            <summary>
            Represents the elements of an HTTP message common to both request and response.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IMessage.ReadBodyAsStringAsync">
            <summary>
            Message body
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IMessage.ContentType">
            <summary>
            Content type of the message body, if any.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IMessage.Headers">
            <summary>
            Message headers
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage">
            <summary>
            Represents an HTTP Request message applicable to Hawk authentication.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.ChallengeParameter">
            <summary>
            Per-request placeholder for the challenge parameter
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.Host">
            <summary>
            Host header value
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.ForwardedFor">
            <summary>
            X-Forwarded-For header value
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.Authorization">
            <summary>
            Authorization header value
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.Uri">
            <summary>
            Request URI
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.QueryString">
            <summary>
            Query string setter for setting query string sans bewit.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage.Method">
            <summary>
            HTTP Method
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage">
            <summary>
            Represents an HTTP response message applicable to Hawk authentication.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage.AddHeader(System.String,System.String)">
            <summary>
            Adds a header to response message
            </summary>
            <param name="name">header name</param>
            <param name="value">header value</param>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage.StatusCode">
            <summary>
            Status code
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage.WwwAuthenticate">
            <summary>
            WwwAuthenticate header value
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Options">
            <summary>
            Hawk authentication options.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.LocalTimeOffsetMillis">
            <summary>
            Local time offset in milliseconds.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.ClockSkewSeconds">
            <summary>
            Skew allowed between the client and the server clocks in seconds. Default is 60 seconds.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.EnableServerAuthorization">
            <summary>
            If true, the Server-Authorization header is sent in the response. Default is true.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.CredentialsCallback">
            <summary>
            Func delegate that returns Credential for the given user identifier.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.NormalizationCallback">
            <summary>
            Func delegate that returns the normalized form of the response message to be used
            as application specific data ('ext' field) in the Server-Authorization response header.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.VerificationCallback">
            <summary>
            Func delegate that returns true if the specified normalized form of the request
            message matches the normalized form of the specified request message.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Options.ResponsePayloadHashabilityCallback">
            <summary>
            Func delegate that returns true, if the response body must be hashed and included
            in the MAC ('mac' field) sent in the Server-Authorization response header.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.WebApi.WebApiMessage">
            <summary>
            The base HTTP message class.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.SimpleWebToken">
            <summary>
            This class represents the token format for the SimpleWebToken.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebToken.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature of the token.
            </summary>
            <param name="key">The key used for signing.</param>
            <returns>true if the signatures match, false otherwise.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler">
            <summary>
            Handles SWT tokens.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.ReadToken(System.String)">
            <summary>
            Reads a serialized token and converts it into a <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="rawToken">The token in serialized form.</param>
            <returns>The parsed form of the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.ParseToken(System.String)">
            <summary>
            Parses the token into a collection.
            </summary>
            <param name="encodedToken">The serialized token.</param>
            <returns>A colleciton of all name-value pairs from the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.DecodeClaims(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>Create <see cref="T:System.Security.Claims.Claim"/> from the incoming token.
            </summary>
            <param name="issuer">The issuer of the token.</param>
            <param name="rawClaims">The name value pairs from the token.</param>        
            <returns>A list of Claims created from the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.DecodeExpiry(System.String)">
            <summary>
            Convert the expiryTime to the <see cref="T:System.DateTime"/> format.
            </summary>
            <param name="expiry">The expiry time from the token.</param>
            <returns>The local expiry time of the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.SignVerify(Thinktecture.IdentityModel.Tokens.SimpleWebToken,System.Byte[])">
            <summary>
            Verifies the signature of the incoming token.
            </summary>
            <param name="key">The key used for signing.</param>
            <returns>true if the signatures match, false otherwise.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Web.Mvc.FrameOptions">
            <summary>
            Indicate the scenarios in which the response may be hosted in an iframe. See https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options for more information.
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Web.Mvc.FrameOptions.Deny">
            <summary>
            Response is never allowed in an iframe.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Web.Mvc.FrameOptionsAttribute">
            <summary>
             FrameOptionsAttribute allows you to set the X-Frame-Options HTTP response header to prevent clickjacking attacks. See https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options for more information.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Web.Mvc.FrameOptionsAttribute.#ctor">
            <summary>
            This default ctor uses FrameOptions.Deny.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Web.Mvc.FrameOptionsAttribute.#ctor(Thinktecture.IdentityModel.Web.Mvc.FrameOptions)">
            <summary>
            Use this ctor to specify the FrameOptions.
            </summary>
            <param name="options">FrameOptions to use.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Web.Mvc.FrameOptionsAttribute.#ctor(System.String)">
            <summary>
            Use this ctor to specify a custom origin.
            </summary>
            <param name="origin">The origin to allow.</param>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer">
            <summary>
            CLR representation of the parameter data of Authorization, WWW-Authenticate, and Server-Authorization headers.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.TryParse(System.String,Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer@)">
            <summary>
            Attempts to convert the passed in header parameter (string) into the CLR equivalent, which is an
            instance of ArtifactsContainer. The return value indicates whether the conversion succeeded.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.IsPayloadHashPresent(System.String)">
            <summary>
            Returns true, if the passed in header parameter contains the hash field.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.ToAuthorizationHeaderParameter">
            <summary>
            Returns the header parameter to be put into the HTTP Authorization header in hawk scheme.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.ToServerAuthorizationHeaderParameter">
            <summary>
            Returns the header parameter to be put into the Server-Authorization header.
            Intended to be used only by HawkServer, while creating the Server-Authorization header
            and hence the scope of this method is internal.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.ToHeaderParameter(System.Boolean)">
            <summary>
            Returns the serialized form of this object.
            </summary>
            <param name="includeClientArtifacts">If true, the client supplied artifacts of id, timestamp, and nonce are included.</param>
            <returns></returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.Id">
            <summary>
            Hawk credentials identifier.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.Timestamp">
            <summary>
            Timestamp (UNIX time).
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.Nonce">
            <summary>
            Client generated nonce.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.ApplicationSpecificData">
            <summary>
            Application specific data that the client or the service can send along.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.Mac">
            <summary>
            Hash-based message authentication code of the normalized request or response, created respectively
            by the client or the service, using the shared secret key.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.PayloadHash">
            <summary>
            Hash of the normalized payload (request or response body). It is just a plain hash and not a 
            hash-based message authentication code.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.TimestampMac">
            <summary>
            Hash-based message authentication code of the normalized timestamp, created using the shared secret key
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer.AreClientArtifactsValid">
            <summary>
            Returns true if the client supplied artifacts of identifier, nonce, and MAC are non-empty and 
            timestamp is greater than 0.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.AuthenticationResult">
            <summary>
            The result of the authentication process.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.AuthenticationResult.Credential">
            <summary>
            The Credential object corresponding to the identifier in the request
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.AuthenticationResult.Artifacts">
            <summary>
            The ArtifactsContainer object containing the client supplied artifacts such as timestamp, hash, mac, etc.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.AuthenticationResult.IsAuthentic">
            <summary>
            True, if the authentication process is successful.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.AuthenticationResult.ApplicationSpecificData">
            <summary>
            The application specific data sent by the client (if any).
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit">
            <summary>
            Represents the query parameter bewit used by Hawk for granting temporary access.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit.#ctor(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,Thinktecture.IdentityModel.Http.Hawk.Core.Credential,System.DateTime,System.Int32,System.String,System.Int32)">
            <summary>
            Represents the query parameter bewit used by Hawk for granting temporary access.
            </summary>
            <param name="request">Request object</param>
            <param name="credential">Hawk credential to use for creating and validating bewit.</param>
            <param name="utcNow">Current date and time in UTC.</param>
            <param name="lifeSeconds">Bewit life time (time to live in seconds).</param>
            <param name="applicationSpecificData">Application specific data to be sent in the bewit</param>
            <param name="localOffset">Local offset in milliseconds.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit.ToBewitString">
            <summary>
            Returns the string representation of the bewit, which is a base64 URL encoded string of format
            id\exp\mac\ext, where id is the user identifier, exp is the UNIX time until which bewit is
            valid, mac is the HMAC of the bewit to protect integrity, and ext is the application specific data.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit.TryGetBewit(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,System.String@)">
            <summary>
            Returns true, if a query string parameter with a name of 'bewit' exists and that there
            is no HTTP Authorization header present in the request. Also, returns the value of the
            bewit parameter from the query string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit.Authenticate(System.String,System.UInt64,Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,Thinktecture.IdentityModel.Http.Hawk.Core.Options)">
            <summary>
            Returns an AuthenticationResult object corresponding to the result of authentication done
            using the client supplied artifacts in the bewit query string parameter.
            </summary>
            <param name="bewit">Value of the query string parameter with the name of 'bewit'.</param>
            <param name="now">Date and time in UTC to be used as the base for computing bewit life.</param>
            <param name="request">Request object.</param>
            <param name="options">Hawk authentication options</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Bewit.RemoveBewitFromUri(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage)">
            <summary>
            Removes the bewit parameter from the URI of the specified IRequestMessage object.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Credential">
            <summary>
            Hawk credential
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Credential.Id">
            <summary>
            Identifier that can be used by a client to uniquely identify an entity (user).
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Credential.Key">
            <summary>
            Shared symmetric key that is exchanged out-of-band between the service and the client.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Credential.User">
            <summary>
            Owner of the credential. If the owner is a human user, user name can be stored here.
            Else, the application name.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Credential.Algorithm">
            <summary>
            The hashing algorithm that the client and the service have agreed to use to create the 
            payload hash as well as HMAC of the request and timestamp.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.Credential.IsValid">
            <summary>
            Returns true, if the identifier is not empty, the shared secret key is not empty, and
            the hashing algorithm is one of the algorithms defined in the SupportedAlgorithms enum.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Cryptographer">
            <summary>
            The class responsible for validating the HMAC in the request (in case of service) and the response (in case of the client)
            and signing the request (in case of client) and response (in case of service) by creating an HMAC.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Cryptographer.IsSignatureValid(System.String,System.String,System.Boolean)">
            <summary>
            Returns true, if the HMAC computed for the normalized request matches the HMAC 
            sent in by the client (ArtifactsContainer.Mac) and if a payload hash is present,
            it matches the hash computed for the normalized payload as well.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Cryptographer.Sign(System.String,System.String)">
            <summary>
            Creates the payload hash and the corresponding HMAC, and updates the artifacts object
            with these new values.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.ByteExtension.IsConstantTimeEqualTo(System.Byte[],System.Byte[])">
            <summary>
            Compare two byte arrays using constant-time algorithm (to prevent time-based analysis of MAC digest match).
            </summary>
            <param name="a">The first byte array</param>
            <param name="b">The second byte array (base64 encoded)</param>
            <returns>true, if the arrays are equal byte for byte</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.ByteExtension.ToBase64String(System.Byte[])">
            <summary>
            Converts a byte array to its equivalent string representation that is base-64 encoded.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.ByteExtension.ToBase64UrlString(System.Byte[])">
            <summary>
            Converts a byte array to its equivalent string representation that is base-64 URL encoded.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.DateTimeExtension.ToUnixTimeMillis(System.DateTime)">
            <summary>
            Converts DateTime to its equivalent UNIX time expressed in milliseconds. Unix time is the number of seconds elapsed since Jan 1, 1970 midnight UTC.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.DateTimeExtension.ToUnixTime(System.DateTime)">
            <summary>
            Converts DateTime to its equivalent UNIX time, the number of seconds elapsed since Jan 1, 1970 midnight UTC.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringBuilderExtension.AppendIfNotEmpty(System.Text.StringBuilder,System.String,System.String,System.Char)">
            <summary>
            Appends the key-value in the form of key="value" with a trailing trailer
            and a space, if value is not null or String.Empty
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringBuilderExtension.AppendNewLine(System.Text.StringBuilder,System.String)">
            <summary>
            Appends the string followed by a new line (\n) to the StringBuilder object, substituting an empty string in case
            the passed in string is null. The out-of-box AppendLine method is not used  because default line terminator is
            not just a new line character.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringExtension.ToBytesFromUtf8(System.String)">
            <summary>
            Returns the byte array corresponding to the UTF-8 encoded string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringExtension.ToBytesFromBase64(System.String)">
            <summary>
            Returns the byte array corresponding to the base-64 encoded string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringExtension.ToUtf8StringFromBase64Url(System.String)">
            <summary>
            Returns the UTF-8 string corresponding to the base-64 URL encoded string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Extensions.StringExtension.ToBool(System.String)">
            <summary>
            Returns true, if the specified string can be parsed to System.Boolean.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient">
            <summary>
            The counterpart of HawkServer in the client side that creates the HTTP Authorization header in hawk scheme
            and authenticates the server response by validating the Server-Authorization response header.
            HawkClient is for per-request use.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.#ctor(Thinktecture.IdentityModel.Http.Hawk.Client.ClientOptions)">
            <summary>
            Authenticates the server response by reading the Server-Authorization header and creates 
            the the HTTP Authorization header in hawk scheme.
            </summary>
            <param name="options">Hawk authentication options</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.AuthenticateAsync(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage)">
            <summary>
            Returns true, if the HMAC computed for the response payload matches the HMAC in the
            Server-Authorization response header. This method also sets the compensation field so 
            that the timestamp in the subsequent requests are adjusted to reduce the clock skew.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.CreateClientAuthorizationAsync(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage)">
            <summary>
            Creates the HTTP Authorization header in hawk scheme.
            The counterpart of the CreateServerAuthorization method in HawkServer.
            </summary>
            <param name="request">Request object</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.CreateBewit(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,System.Int32)">
            <summary>
            Adds the bewit to the query string of the specified HttpRequestMessage object and
            returns the bewit string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.CreateBewitInternal(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,System.DateTime,System.Int32)">
            <summary>
            Adds the bewit to the query string of the specified HttpRequestMessage object and 
            returns the bewit string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.CreateClientAuthorizationInternalAsync(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,System.DateTime)">
            <summary>
            Creates the HTTP Authorization header in hawk scheme.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.IsResponseTamperedAsync(Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer,Thinktecture.IdentityModel.Http.Hawk.Core.Cryptographer,Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage)">
            <summary>
            Returns true if the server response HMAC cannot be validated, indicating possible tampering.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.IsTimestampResponseTampered(Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer,Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage)">
            <summary>
            Returns true, if there is a WWW-Authenticate header containing ts and tsm but mac
            computed for ts does not match tsm, indicating possible tampering. Otherwise, returns false.
            This method also sets the compensation field so that the timestamp in the subsequent requests
            are adjusted to reduce the clock skew.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Client.HawkClient.CompensatorySeconds">
            <summary>
            Added to current date time before computing the UNIX time. HawkClient can automatically
            adjust the value in this property based on the timestamp sent by the service in the 
            WWW-Authenticate header in an attempt to keep the server and the client clocks in sync.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.HawkSchemeHeader">
            <summary>
            Represents the HTTP authorization header in hawk scheme.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.HawkSchemeHeader.AuthenticateAsync(System.UInt64,Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,Thinktecture.IdentityModel.Http.Hawk.Core.Options)">
            <summary>
            Returns an AuthenticationResult object corresponding to the result of authentication done
            using the client supplied artifacts in the HTTP authorization header in hawk scheme.
            </summary>
            <param name="now">Current UNIX time in milliseconds.</param>
            <param name="request">Request object.</param>
            <param name="options">Hawk authentication options</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.HawkSchemeHeader.IsTimestampFresh(System.UInt64,Thinktecture.IdentityModel.Http.Hawk.Core.ArtifactsContainer,Thinktecture.IdentityModel.Http.Hawk.Core.Options)">
            <summary>
            Returns true if the timestamp sent in by the client is fresh subject to the 
            maximum allowed skew and the adjustment offset.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.HawkServer">
            <summary>
            Authenticates the incoming request based on the Authorize request header or bewit query string parameter
            and sets the Server-Authorization or the WWW-Authenticate response header. HawkServer is for per-request use.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.HawkServer.#ctor(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IRequestMessage,Thinktecture.IdentityModel.Http.Hawk.Core.Options)">
            <summary>
            Authenticates the incoming request based on the Authorize request header or bewit query string parameter
            </summary>
            <param name="request">The request object to be authenticated</param>
            <param name="options">Hawk authentication options</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.HawkServer.AuthenticateAsync">
            <summary>
            Returns a ClaimsPrincipal object with the NameIdentifier and Name claims, if the request can be
            successfully authenticated based on query string parameter bewit or HTTP Authorization header (hawk scheme).
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.HawkServer.CreateServerAuthorizationAsync(Thinktecture.IdentityModel.Http.Hawk.Core.MessageContracts.IResponseMessage)">
            <summary>
            Returns the name of the response header (WWW-Authenticate or Server-Authorization) and the corresponding
            value, respectively for an unauthorized and a successful request.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants">
            <summary>
            Global constants
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.Scheme">
            <summary>"hawk"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.Version">
            <summary>"1"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.ServerAuthorizationHeaderName">
            <summary>"Server-Authorization"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.WwwAuthenticateHeaderName">
            <summary>"WWW-Authenticate"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.XffHeaderName">
            <summary>X-Forwarded-For</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.ContentTypeHeaderName">
            <summary>"Content-Type"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.AuthorizationHeaderName">
            <summary>"Authorization"</summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.HawkConstants.Bewit">
            <summary>"bewit"</summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.SupportedAlgorithms">
            <summary>
            The hashing algorithms currently supported by this implementation.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher">
            <summary>
            The class responsible for creating and validating hash and HMAC.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher.#ctor(Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.SupportedAlgorithms)">
            <summary>
            The class responsible for creating and validating hash and HMAC.
            </summary>
            <param name="algorithmToUse">The hashing algorithm to use</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified data.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher.IsValidHash(System.Byte[],System.Byte[])">
            <summary>
            Returns true, if the computed hash value for the specified data matches the specified hash.
            Matching is done constant-time to prevent time-based analysis.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher.ComputeHmac(System.Byte[],System.String)">
            <summary>
            Computes the keyed hash value (HMAC) for the specified data.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.Hasher.IsValidMac(System.Byte[],System.String,System.Byte[])">
            <summary>
            Returns true, if the computed HMAC for the specified data matches the specified HMAC.
            Matching is done constant-time to prevent time-based analysis.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.NonceGenerator">
            <summary>
            Generates a nonce to be used by a .NET client.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.Helpers.NonceGenerator.Generate(System.Int32)">
            <summary>
            Generates a nonce matching the specified length and returns the same. Default length is 6.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedPayload">
            <summary>
            Represents the normalized payload, in the following format.
            hawk.1.payload\n
            content type\n
            body content\n
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedPayload.ToBytes">
            <summary>
            Returns the normalized payload bytes.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedRequest">
            <summary>
            Represents the normalized request, in the following format.
            hawk.1.header\n
            timestamp\n
            nonce\n
            HTTP method\n
            uri path and query string\n
            host name\n
            port\n
            payload hash\n
            application specific data\n
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedRequest.ToString">
            <summary>
            Returns the normalized request string.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedRequest.ToBytes">
            <summary>
            Returns the normalized request bytes.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedRequest.IsBewit">
            <summary>
            Set to true, if this instance is for a bewit.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedRequest.IsServerAuthorization">
            <summary>
            Set to true, if this instance is for server authorization response.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedTimestamp">
            <summary>
            Normalized representation of the timestamp data to be sent in the WWW-Authenticate header,
            when authentication failed on account of stale timestamp sent in by the client.
            hawk.1.ts\n
            timestamp\n
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedTimestamp.ToString">
            <summary>
            Returns the normalized representation of the timestamp data.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedTimestamp.IsValid(System.Byte[])">
            <summary>
            Returns true, if the HMAC calculated for the normalized representation of the timestamp data that
            this instance represents matches the passed in HMAC.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.Core.NormalizedTimestamp.ToWwwAuthenticateHeaderParameter">
            <summary>
            Returns the header parameter to be put into the HTTP WWW-Authenticate header. The field ts has the timestamp
            in UNIX time corresponding to the server clock and the field tsm is the MAC calculated for the normalized
            timestamp data using the shared symmetric key and the algorithm agreed upon.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Http.Hawk.WebApi.HawkAuthenticationHandler">
            <summary>
            The message handler that performs the authentication based on the authenticity of the HMAC.
            Add a new instance of this handler to config.MessageHandlers in WebApiConfig.Register().
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Http.Hawk.WebApi.HawkAuthenticationHandler.#ctor(Thinktecture.IdentityModel.Http.Hawk.Core.Options)">
            <summary>
            The message handler that authenticates the request using Hawk.
            </summary>
            <param name="options">Hawk authentication options</param>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.Name">
            <summary>
            The display name for the identity provider.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.LoginUrl">
            <summary>
            The url used for Login to the identity provider.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.ImageUrl">
            <summary>
            The url that is used to retrieve the image for the identity provider
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.EmailAddressSuffixes">
            <summary>
            A list fo email address suffixes configured for the identity provider.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.ConsoleExtensions">
            <summary>
            Helper class to write out colored messages to the console
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleGreen(System.String)">
            <summary>
            Writes green text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleRed(System.String)">
            <summary>
            Writes red text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleYellow(System.String)">
            <summary>
            Writes yellow text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ColoredWriteLine(System.String,System.ConsoleColor)">
            <summary>
            Writes out text with the specified ConsoleColor.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToEpochTime(System.DateTime)">
            <summary>
            Converts the given date value to epoch time.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToEpochTime(System.DateTimeOffset)">
            <summary>
            Converts the given date value to epoch time.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToDateTimeFromEpoch(System.Int64)">
            <summary>
            Converts the given epoch time to a <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/> kind.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToDateTimeOffsetFromEpoch(System.Int64)">
            <summary>
            Converts the given epoch time to a UTC <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.OAuth2Client.CreateForm(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            FormUrlEncodes both Sets of Key Value Pairs into one form object
            </summary>
            <param name="explicitProperties"></param>
            <param name="additionalProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.OAuth2Client.MergeAdditionKeyValuePairsIntoExplicitKeyValuePairs(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Merges additional into explicit properties keeping all explicit properties intact
            </summary>
            <param name="explicitProperties"></param>
            <param name="additionalProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:HttpUserNameSecurityTokenHandler"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.#ctor(Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialDelegate)">
            <summary>
            Initializes a new instance of the <see cref="!:HttpUserNameSecurityTokenHandler"/> class.
            </summary>
            <param name="validateUserNameCredential">The credential validation callback.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates the username and password.
            </summary>
            <param name="token">The token.</param>
            <returns>An identity collection representing the identity in the token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialCore(System.String,System.String)">
            <summary>
            Validates the user name credential core.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredential">
            <summary>
            Gets or sets the credential validation callback
            </summary>
            <value>
            The credential validation callback.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.CanValidateToken">
            <summary>
            Gets a value indicating whether this instance can validate a token.
            </summary>
            <value>
            	<c>true</c> if this instance can validate a token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialDelegate">
            <summary>
            Callback type for validating the credential
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>True when the credential could be validated succesfully. Otherwise false.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimPermission">
            <summary>
            Encapsulates calls to ClaimsAuthorizationManager with custom claim types in a CLR permission
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimPermission.ActionType">
            <summary>
            Default action claim type.
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimPermission.ResourceType">
            <summary>
            Default resource claim type
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermission"/> class.
            </summary>
            <param name="resource">The resource.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermission"/> class.
            </summary>
            <param name="resourceType">Type of the resource.</param>
            <param name="resource">The resource.</param>
            <param name="actionType">Type of the action.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Copy">
            <summary>
            Creates and returns an identical copy of the current permission.
            </summary>
            <returns>
            A copy of the current permission.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Demand">
            <summary>
            Throws a <see cref="T:System.Security.SecurityException"/> at run time if the security requirement is not met.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.CheckAccess(System.String,System.String,System.Security.Claims.Claim[])">
            <summary>
            Calls ClaimsAuthorizationManager.
            </summary>
            <param name="action">The action.</param>
            <param name="resource">The resource.</param>
            <param name="additionalResources">Additional resources.</param>
            <returns>True when access is granted. Otherwise false.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.FromXml(System.Security.SecurityElement)">
            <summary>
            Reconstructs a security object with a specified state from an XML encoding.
            </summary>
            <param name="e">The XML encoding to use to reconstruct the security object.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Intersect(System.Security.IPermission)">
            <summary>
            Creates and returns a permission that is the intersection of the current permission and the specified permission.
            </summary>
            <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
            <returns>
            A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not an instance of the same class as the current permission. </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.IsSubsetOf(System.Security.IPermission)">
            <summary>
            Determines whether the current permission is a subset of the specified permission.
            </summary>
            <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
            <returns>
            true if the current permission is a subset of the specified permission; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not of the same type as the current permission. </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.IsUnrestricted">
            <summary>
            Returns a value indicating whether unrestricted access to the resource protected by the permission is allowed.
            </summary>
            <returns>
            true if unrestricted use of the resource protected by the permission is allowed; otherwise, false.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.ToXml">
            <summary>
            Creates an XML encoding of the security object and its current state.
            </summary>
            <returns>
            An XML encoding of the security object, including any state information.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Union(System.Security.IPermission)">
            <summary>
            Creates a permission that is the union of the current permission and the specified permission.
            </summary>
            <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
            <returns>
            A new permission that represents the union of the current permission and the specified permission.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not of the same type as the current permission. </exception>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute">
            <summary>
            Permission Attribute for calling ClaimsAuthorizationManager with custom claim types
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute"/> class.
            </summary>
            <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"/> values.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.CreatePermission">
            <summary>
            When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"/> in an assembly's metadata.
            </summary>
            <returns>
            A serializable permission object.
            </returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.ResourceType">
            <summary>
            Gets or sets the claim type of the resource.
            </summary>
            <value>
            The claim type of the resource.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.Resource">
            <summary>
            Gets or sets the resource name.
            </summary>
            <value>
            The resource name.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.OperationType">
            <summary>
            Gets or sets the claim type of the operation.
            </summary>
            <value>
            The claim type of the operation.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.Operation">
            <summary>
            Gets or sets the operation name .
            </summary>
            <value>
            The operation name.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.AuthenticationInstantClaim">
            <summary>
            Helper class to create an authentication instant claim
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.AuthenticationInstantClaim.Now">
            <summary>
            Returns an authentication instant claim for the current date/time
            </summary>
            <value>authentication instant claim.</value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization">
            <summary>
            Provides direct access methods for evaluating authorization policy
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.ActionType">
            <summary>
            Default action claim type.
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.ResourceType">
            <summary>
            Default resource claim type
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.String[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="resource">The resource.</param>
            <param name="action">The action.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="actions">The actions.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.Security.Claims.Claim[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="action">The action.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.String,System.Security.Claims.Claim[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="action">The action.</param>
            <param name="resource">The resource name.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.Security.Claims.AuthorizationContext)">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="context">The authorization context.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.AuthorizationManager">
            <summary>
            Gets the registered authorization manager.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.CryptoRandom">
            <summary>
            A class that mimics the standard Random class in the .NET Framework - but uses RNGCryptoServiceProvider internally.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.CryptoRandom"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.CryptoRandom"/> class.
            </summary>
            <param name="ignoredSeed">seed (ignored)</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue"/>; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals zero, <paramref name="maxValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxValue"/> is less than zero.
            </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions">
            <summary>
            Extension methods for RequestSecurityTokenResponse
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
            <summary>
            Turns a RSTR into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
            <summary>
            Turns a RST/RSTR pair into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="rst">The RST.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Turns a RST/ProofKey pair into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="proofKey">The ProofKey.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.GetProofKey(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
            <summary>
            Gets the proof key from an RST/RSTR pair.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="rst">The RST.</param>
            <returns>The proof key.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions">
            <summary>
            Extension methods to convert tokens to string and claims
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The generic XML security token.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The token.</param>
            <param name="decryptionCertificate">The decryption certificate.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The generic XML security token.</param>
            <param name="handler">The security token handler.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.GenericXmlSecurityToken)">
            <summary>
            Retrieves the XML from a GenericXmlSecurityToken
            </summary>
            <param name="token">The token.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Converts a supported token to an XML string.
            </summary>
            <param name="token">The token.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Converts a supported token to an XML string.
            </summary>
            <param name="token">The token.</param>
            <param name="handler">The token handler.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="signingCertificate">The signing certificate.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="signingCertificate">The signing certificate.</param>
            <param name="audienceUri">The audience URI.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="handler">The handler.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.XmlExtensions">
            <summary>
            Extension methods for XML related tasks
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsString(System.Xml.XmlReader)">
            <summary>
                Converts an XmlReader to a string.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsXmlReader(System.String)">
            <summary>
            Converts a string to an XmlReader.
            </summary>
            <param name="input">The input string.</param>
            <returns>An XmlReader</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsXmlReader(System.String,System.Boolean)">
            <summary>
            Converts a string to an XmlReader.
            </summary>
            <param name="input">The input.</param>
            <param name="isInteractive">if set to <c>true</c> the reader will be in an interactive state.</param>
            <returns>An XmlReader</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts a XmlDocument to a XDocument.
            </summary>
            <param name="document">The XmlDocument.</param>
            <returns>A XDocument</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXElement(System.Xml.XmlElement)">
            <summary>
            Converts a XmlElement to a XElement.
            </summary>
            <param name="element">The XmlElement.</param>
            <returns>A XElement</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts a XDocument to a XmlDocument.
            </summary>
            <param name="document">The XDocument.</param>
            <returns>A XmlDocument</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXmlElement(System.Xml.Linq.XElement)">
            <summary>
            Converts a XElement to a XmlElement.
            </summary>
            <param name="element">The XElement.</param>
            <returns>A XmlElement</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.ObfuscatingComparer">
            <summary>
            Helper class to do equality checks without leaking timing information
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.ObfuscatingComparer.IsEqual(System.String,System.String)">
            <summary>
            Checks two strings for equality without leaking timing information.
            </summary>
            <param name="s1">string 1.</param>
            <param name="s2">string 2.</param>
            <returns>
            	<c>true</c> if the specified strings are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler">
            <summary>
            Generic security token handler for username/password type credentials
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.#ctor(Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler"/> class.
            </summary>
            <param name="validateUserNameCredential">The credential validation callback.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialCore(System.String,System.String)">
            <summary>
            Validates the user name credential core.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates the username and password.
            </summary>
            <param name="token">The token.</param>
            <returns>A ClaimsIdentityCollection representing the identity in the token</returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredential">
            <summary>
            Gets or sets the credential validation callback
            </summary>
            <value>
            The credential validation callback.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.CanValidateToken">
            <summary>
            Gets a value indicating whether this instance can validate a token.
            </summary>
            <value>
            	<c>true</c> if this instance can validate a token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialDelegate">
            <summary>
            Callback type for validating the credential
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>True when the credential could be validated succesfully. Otherwise false.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.WSTrust.WSTrustClient">
            <summary>
            Wrapper for the WIF WSTrustChannelFactory/WSTrustChannel plumbing.
            This code is mainly for convience and does not provide any optimizations like caching of the channel factory.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.WSTrust.WSTrustClient.Issue(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials)">
            <summary>
            Requests a bearer token.
            </summary>
            <param name="stsAddress">The STS address.</param>
            <param name="appliesTo">The realm address.</param>
            <param name="binding">The binding.</param>
            <param name="credentials">The credentials.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.WSTrust.WSTrustClient.Issue(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
            <summary>
            Requests a token desribed by an RST.
            </summary>
            <param name="stsAddress">The STS address.</param>
            <param name="binding">The binding.</param>
            <param name="credentials">The credentials.</param>
            <param name="rst">The RST.</param>
            <param name="rstr">The RSTR.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Constants.DateTimeFormats">
            <summary>
            Represents DateTimeFormats used in tokens and claims
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Constants.DateTimeFormats.Accepted">
            <summary>
            Accepted DateTime formats
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Constants.DateTimeFormats.Generated">
            <summary>
            Generated DateTime format
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.X509CertificateEndpointIdentityExtensions">
            <summary>
            Extension methods for X509CertificateEndpointIdentity
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.X509CertificateEndpointIdentityExtensions.GetEndCertificate(System.ServiceModel.X509CertificateEndpointIdentity)">
            <summary>
            Finds the leaf certificate on an X509EndpointIdentity
            </summary>
            <param name="epi">The epi.</param>
            <returns>The target site X509 certificate</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.Http.HttpsIssuerNameRegistry">
            <summary>
            Simple implementation of an issuer registy that returns the certificate issuer name or public key hash as an issuer
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.HttpsIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the name of the issuer.
            </summary>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.TestIssuerNameRegistry">
            <summary>
            Simple implementation of an issuer registy that returns the certificate issuer name or public key hash as an issuer
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.TestIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the name of the issuer.
            </summary>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.RSAExtensions">
            <summary>
            Extension methods for RSACryptoServiceProvider
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHash(System.Security.Cryptography.RSA)">
            <summary>
            Calculates a hash for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <returns>The hash byte array</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHashString(System.Security.Cryptography.RSA)">
            <summary>
            Calculates a hash string for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <returns>The hash string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHashString(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Calculates a hash string for an RSA key.
            </summary>
            <param name="rsa">The RSA Key</param>
            <param name="entropy">Additional entropy.</param>
            <returns>The hash string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHash(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Calculates a hash for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <param name="entropy">Additional entropy.</param>
            <returns>The hash byte array</returns>
        </member>
    </members>
</doc>
